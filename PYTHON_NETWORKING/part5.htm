<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head><meta/><title>Chapter 4: Exploring Network Automation</title><link href="navigation.css"/><link href="document.css"/></head><body><p><a href="part4.htm">&lt; Назад</a> | <a href="index.html">Содержимое</a> | <a href="part6.htm">Далее &gt;</a></p><p><a>CHAPTER 4: EXPLORING NETWORK AUTOMATION</a><a>&zwnj;</a></p><h2><a>Overview</a></h2><p>Network automation refers to the process of automating the management, configuration, testing, deployment, and monitoring of network devices and their functions using software and scripting tools. In this chapter, we will explore network automation using Python and its libraries, focusing on the essential concepts and techniques.</p><p>To begin with network automation, it&#39;s crucial to understand the key concepts and components that are involved:</p><p>Network Devices: These include routers, switches, firewalls, and other devices that make up the network infrastructure. Network automation aims to manage and configure these devices efficiently and consistently.</p><p>Network Services: Network services are the functions provided by network devices, such as routing, switching, and security features. Automating these services ensures the network performs optimally and maintains its desired state.</p><p>Configuration Management: This involves maintaining a standard configuration for network devices and applying configuration changes as needed. Network automation helps keep track of these changes, ensuring that devices have the correct settings and reducing the risk of configuration-related issues.</p><p>Monitoring and Reporting: Network automation can be used to collect and analyze data from network devices, allowing administrators to monitor the health of the network and generate reports. This information can be used to identify potential issues and optimize network performance.</p><p>Python also offers a wide range of libraries that can help you automate various aspects of network management.</p><p>Some popular Python libraries for network automation include:</p><p>●  Paramiko: A library for SSH and SFTP, enabling remote command execution and secure file transfers.</p><p>●    Netmiko: A library that simplifies SSH-based connections to network devices and automates configuration and monitoring tasks.</p><p>●     NAPALM (Network Automation and Programmability Abstraction Layer with Multivendor support): A library that provides a unified API to interact with different network devices, making it easier to manage and configure them.</p><p>●    Exscript: A high-level library for automating network devices, which simplifies connecting, configuring, and gathering information from them.</p><p>●   Ansible: Although not a Python library, Ansible is a widely-used automation tool that uses Python and YAML for defining automation tasks.</p><p>As we progress through this chapter, we will dive deeper into these libraries and learn how to use them effectively for network automation tasks.</p><h2><a>Network Automation Concepts</a></h2><p>Network automation stands as a critical tool in the modern network administrator&#39;s kit, playing an instrumental role in efficiently managing, configuring, and maintaining network devices and services. In this section, we delve into these concepts in depth, discussing how automation can simplify complex tasks, enhance consistency, and minimize human error in configuration management. We also underscore the potential of automation in network operations, highlighting its ability to streamline workflows, improve network reliability, and free up administrators&#39; time for strategic initiatives.</p><p><a>Network Devices</a></p><p>Network devices, such as routers, switches, and firewalls, make up the backbone of any network infrastructure. These devices have multiple functions, like routing traffic, managing VLANs, and enforcing security policies. Managing these devices manually can be time-consuming, error- prone, and inefficient.</p><p>Network automation can help address these issues by:</p><p>●   Automating device discovery: By utilizing Python scripts and libraries like Nmap, you can discover devices on a network automatically, gathering their IP addresses, device types, and other relevant information.</p><p>●   Configuration deployment: Network automation tools, such as Netmiko and NAPALM, allow you to deploy standardized configurations to multiple devices simultaneously, ensuring uniformity across the network.</p><p>●    Backup and restoration: Automating the backup process for device configurations ensures that you always have a recent copy available for restoration in case of device failure or misconfiguration.</p><p>●    Firmware upgrades: Keeping device firmware up-to-date is crucial for security and performance. Automation can help schedule and deploy firmware updates across multiple devices, reducing manual intervention and minimizing downtime.</p><p><a>Network Services</a></p><p>Network services refer to the various functions provided by network devices. These services include routing, switching, security, and Quality of Service (QoS) management. Automating these services can improve network performance, security, and reliability.</p><p>●      Routing: Network automation can help manage routing protocols and route redistribution, ensuring optimal path selection and minimizing network congestion. Python libraries like Exscript or Netmiko can be used to automate routing configurations and updates.</p><p>●     Switching: Automation can simplify the management of VLANs, spanning tree protocols,  and  other  switching-related  configurations.  This  can  help  prevent</p><p>misconfigurations that may lead to network loops or other issues.</p><p>●  Security: Network automation can help enforce security policies, such as Access Control Lists (ACLs), VPN configurations, and firewall rules. Automation ensures that security configurations are applied consistently and can quickly update them as needed.</p><p>●   QoS: Quality of Service (QoS) management involves prioritizing network traffic based on its type or source. Automating QoS configurations ensures that critical applications and services receive the necessary bandwidth and minimizes latency.</p><p><a>Configuration Management</a></p><p>Configuration management is a critical facet of network administration. It involves maintaining a standard configuration for network devices and applying changes as per requirements. Network automation can significantly enhance configuration management in several ways. Firstly, it ensures consistency across devices, reducing discrepancies and errors. Secondly, it simplifies mass configurations, saving time and resources. Thirdly, it provides the capability to revert to previous configurations when required, improving network stability. Lastly, automation supports auditing and compliance by maintaining detailed logs of configuration changes, thus fostering accountability and transparency.</p><p>Network automation can improve configuration management by:</p><p>●  Standardizing configurations: By deploying standardized configurations, you can ensure that devices follow best practices, minimizing the risk of configuration-related issues.</p><p>●   Change tracking: Automation tools can track and log configuration changes, allowing administrators to identify the cause of issues and roll back changes if necessary.</p><p>●  Validation and compliance: Network automation can help validate configurations against predefined rules or standards, ensuring that devices adhere to organizational policies and industry best practices.</p><p>●   Version control: By integrating network automation with version control systems like Git, you can keep a history of configuration changes, making it easier to track and manage different versions.</p><p>By incorporating automation into network devices, services, and configuration management, you can streamline operations, reduce human error, and improve overall network performance and security. Python, along with its libraries and frameworks, serves as a powerful tool to automate these tasks, making it an invaluable asset for network administrators.</p><h2><a>Netmiko and Paramiko libraries</a></h2><p>Paramiko and Netmiko are popular Python libraries used for automating network tasks, particularly for establishing and managing SSH connections to network devices. Let us learn about each of these libraries, their essential features, and how to install them in your existing Python environment.</p><p><a>About Paramiko</a></p><p>Paramiko is a versatile Python library designed to facilitate the implementation of the SSHv2 protocol, which is integral for establishing secure remote connections to network devices. This library allows users to execute commands and transfer files securely over these remote connections. Additionally, Paramiko offers support for the SFTP protocol, which is a secure, reliable method of transferring files between local and remote systems. Its robust features and emphasis on security make Paramiko an essential tool to automate a range of tasks while ensuring the integrity and confidentiality of data during transmission.</p><p>Some essential features of Paramiko include:</p><p>●  Pure Python implementation of SSHv2: Paramiko is written entirely in Python, making it compatible with a wide range of systems without requiring additional dependencies.</p><p>●  Supports key-based and password-based authentication: Paramiko allows for both public key and password-based authentication methods, providing flexibility in how you secure your connections.</p><p>●   Provides an API for creating custom SSH clients and servers: With Paramiko, you can develop your own SSH-based applications, such as custom clients or servers, to suit your specific requirements.</p><p><a>Installing Paramiko</a></p><p>To install Paramiko, you can use the pip package manager. Open a terminal or command prompt and run the following command:</p><p><br/></p><p>pip            install            paramiko                       </p><p><a>About Netmiko</a></p><p>Netmiko is a versatile Python library developed on the Paramiko framework, designed to streamline the process of connecting to and automating a variety of network devices over Secure Shell (SSH). It provides robust, higher-level abstractions and functionalities that simplify the complexities of managing connections, dispatching commands, and handling responses from a diverse set of network devices.</p><p>Some essential features of Netmiko include:</p><p>●  Multi-vendor support: Netmiko supports a wide range of network devices from different vendors, including Cisco, Juniper, Arista, HP, and more, making it a versatile library for managing diverse network environments.</p><p>●   Connection management: Netmiko handles the details of establishing, maintaining, and closing SSH connections to network devices, allowing you to focus on writing automation scripts.</p><p>●   Output handling: Netmiko can parse and manipulate the output from network devices, making it easier to work with and process the data.</p><p>●   Built-in error handling and recovery: Netmiko includes error-handling mechanisms that help recover from common issues such as timeouts, authentication failures, and unexpected device responses.</p><p><a>Installing Netmiko</a></p><p>To install Netmiko, use the pip package manager by running the following command in your terminal or command prompt:</p><p><br/></p><p>pip install netmiko</p><p>pip install netmiko</p><p/><p>pip install netmiko</p><p>By installing Paramiko and Netmiko, you&#39;ll have access to powerful tools for automating network tasks, managing SSH connections, and working with a wide range of network devices. These libraries will be instrumental in building efficient and reliable network automation scripts.</p><h2><a>Managing VLANs</a></h2><p>VLAN (Virtual Local Area Network) management involves creating, modifying, and deleting VLANs on network devices such as switches. VLANs are used to segment a network into smaller, isolated broadcast domains, improving performance and security. They allow devices within the same VLAN to communicate with each other, even if they are on different physical switches, while preventing communication with devices outside the VLAN.</p><p>In this demonstration, we will use the Netmiko library to manage VLANs on a Cisco switch. Netmiko simplifies the process of connecting to and automating network devices over SSH, making it a suitable choice for this task.</p><p>Below is a step-by-step walkthrough to managing VLANs using Netmiko:</p><p><a>Import Required libraries</a></p><p>In your Python script, import the necessary libraries:</p><p><br/></p><p>from netmiko import ConnectHandler</p><p>from netmiko import ConnectHandler</p><p/><p>from netmiko import ConnectHandler</p><p><br/></p><p><a>Define Device Information</a></p><p>Specify the device details, such as device type, IP address, username, and password. Replace the placeholders with your device&#39;s actual information:</p><p><br/></p><p>cisco_switch = { &#39;device_type&#39;: &#39;cisco_ios&#39;, &#39;ip&#39;: &#39;192.168.1.1&#39;,</p><p>&#39;username&#39;: &#39;your_username&#39;, &#39;password&#39;: &#39;your_password&#39;,</p><p>}</p><p>cisco_switch = { &#39;device_type&#39;: &#39;cisco_ios&#39;, &#39;ip&#39;: &#39;192.168.1.1&#39;,</p><p>&#39;username&#39;: &#39;your_username&#39;, &#39;password&#39;: &#39;your_password&#39;,</p><p>}</p><p/><p>cisco_switch = { &#39;device_type&#39;: &#39;cisco_ios&#39;, &#39;ip&#39;: &#39;192.168.1.1&#39;,</p><p>&#39;username&#39;: &#39;your_username&#39;, &#39;password&#39;: &#39;your_password&#39;,</p><p>}</p><p><br/></p><p><a>Connect to Device</a></p><p>Establish an SSH connection to the switch using the ConnectHandler function:</p><p><br/></p><p>connection = ConnectHandler(**cisco_switch)</p><p>connection = ConnectHandler(**cisco_switch)</p><p/><p>connection = ConnectHandler(**cisco_switch)</p><p><br/></p><p><a>Create New VLAN</a></p><p>To create a new VLAN, define a function that sends the necessary commands to the switch:</p><p>def create_vlan(connection, vlan_id, vlan_name): config_commands = [</p><p>f&#39;vlan {vlan_id}&#39;, f&#39;name {vlan_name}&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) return output</p><p>def create_vlan(connection, vlan_id, vlan_name): config_commands = [</p><p>f&#39;vlan {vlan_id}&#39;, f&#39;name {vlan_name}&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) return output</p><p/><p>def create_vlan(connection, vlan_id, vlan_name): config_commands = [</p><p>f&#39;vlan {vlan_id}&#39;, f&#39;name {vlan_name}&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) return output</p><p>Call the function with VLAN ID and name</p><p><br/></p><p>output = create_vlan(connection, 100, &#39;Test_VLAN&#39;)</p><p>print(output)</p><p>output = create_vlan(connection, 100, &#39;Test_VLAN&#39;)</p><p>print(output)</p><p/><p>output = create_vlan(connection, 100, &#39;Test_VLAN&#39;)</p><p>print(output)</p><p><br/></p><p><a>Delete VLAN</a></p><p>To delete a VLAN, define a function that sends the &#39;no vlan&#39; command to the switch:</p><p><br/></p><p>def delete_vlan(connection, vlan_id): config_commands = [</p><p>f&#39;no vlan {vlan_id}&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) return output</p><p>def delete_vlan(connection, vlan_id): config_commands = [</p><p>f&#39;no vlan {vlan_id}&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) return output</p><p/><p>def delete_vlan(connection, vlan_id): config_commands = [</p><p>f&#39;no vlan {vlan_id}&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) return output</p><p>Call this function with the VLAN ID you want to delete:</p><p><br/></p><p>output = delete_vlan(connection, 100)</p><p>print(output)</p><p>output = delete_vlan(connection, 100)</p><p>print(output)</p><p/><p>output = delete_vlan(connection, 100)</p><p>print(output)</p><p><br/></p><p><a>Close the Connection</a></p><p>Finally, remember to close the SSH connection to the switch:</p><p>connection.disconnect()                      </p><p>By using Netmiko, you can easily manage VLANs on network devices, automating tasks like creating, modifying, and deleting VLANs. This can save time, reduce the risk of errors, and improve overall network performance and security.</p><h2><a>Automating SSH connections</a></h2><p>SSH (Secure Shell) is a cryptographic network protocol used to securely access and manage network devices and servers over an unsecured network. It provides a secure channel for executing commands, transferring files, and managing network devices remotely. Automating SSH connections can help streamline network management tasks and improve efficiency.</p><p>In this demonstration, we will use the Netmiko library to automate SSH connections to a network device. Netmiko is built on top of Paramiko and provides higher-level abstractions, making it easier to manage connections, send commands, and handle output from various network devices.</p><p>Below is a step-by-step walkthrough to automating SSH connections using Netmiko:</p><p><a>Define Device Information</a></p><p>Specify the device details, such as device type, IP address, username, and password. Replace the placeholders with your device&#39;s actual information:</p><p><br/></p><p>network_device = { &#39;device_type&#39;: &#39;cisco_ios&#39;, &#39;ip&#39;: &#39;192.168.1.1&#39;,</p><p>&#39;username&#39;: &#39;your_username&#39;, &#39;password&#39;: &#39;your_password&#39;,</p><p>}</p><p>network_device = { &#39;device_type&#39;: &#39;cisco_ios&#39;, &#39;ip&#39;: &#39;192.168.1.1&#39;,</p><p>&#39;username&#39;: &#39;your_username&#39;, &#39;password&#39;: &#39;your_password&#39;,</p><p>}</p><p/><p>network_device = { &#39;device_type&#39;: &#39;cisco_ios&#39;, &#39;ip&#39;: &#39;192.168.1.1&#39;,</p><p>&#39;username&#39;: &#39;your_username&#39;, &#39;password&#39;: &#39;your_password&#39;,</p><p>}</p><p><br/></p><p><a>Connect to Device</a></p><p>Establish an SSH connection to the network device using the ConnectHandler function:</p><p><br/></p><p>connection = ConnectHandler(**network_device)</p><p>connection = ConnectHandler(**network_device)</p><p/><p>connection = ConnectHandler(**network_device)</p><p><br/></p><p><a>Send Commands to Device</a></p><p>You can now send commands to the network device using the send_command method. For example, to retrieve the device&#39;s running configuration, use:</p><p><br/></p><p>output = connection.send_command(&#39;show run&#39;)</p><p>print(output)</p><p>output = connection.send_command(&#39;show run&#39;)</p><p>print(output)</p><p/><p>output = connection.send_command(&#39;show run&#39;)</p><p>print(output)</p><p><br/></p><p><a>Send Configuration Commands</a></p><p>To send a set of configuration commands, use the send_config_set method. For example, to configure an interface, you can use the following code:</p><p><br/></p><p>config_commands = [</p><p>&#39;interface GigabitEthernet0/1&#39;, &#39;description Example Interface&#39;,</p><p>&#39;ip address 192.168.2.1 255.255.255.0&#39;,</p><p>&#39;no shutdown&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) print(output)</p><p>config_commands = [</p><p>&#39;interface GigabitEthernet0/1&#39;, &#39;description Example Interface&#39;,</p><p>&#39;ip address 192.168.2.1 255.255.255.0&#39;,</p><p>&#39;no shutdown&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) print(output)</p><p/><p>config_commands = [</p><p>&#39;interface GigabitEthernet0/1&#39;, &#39;description Example Interface&#39;,</p><p>&#39;ip address 192.168.2.1 255.255.255.0&#39;,</p><p>&#39;no shutdown&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) print(output)</p><p><br/></p><p><a>Close the Connection</a></p><p>Finally, remember to close the SSH connection to the network device:</p><p><br/></p><p>connection.disconnect()</p><p>connection.disconnect()</p><p/><p>connection.disconnect()</p><p>By using Netmiko, you can automate SSH connections to network devices, allowing you to execute commands and manage configurations programmatically. This can save time, reduce the risk of errors, and improve overall network management efficiency.</p><h2><a>Executing Remote Commands</a></h2><p>Remote commands are commands executed on a remote device, such as a server or network equipment, from a local machine. This is a common practice in network administration and management, as it allows administrators to manage devices without physically accessing them. Executing remote commands can help automate repetitive tasks, troubleshoot issues, and maintain network devices efficiently.</p><p>We will use the Netmiko library to demonstrate executing remote commands on a network device over an SSH connection. Netmiko simplifies the process of connecting to and automating network devices over SSH.</p><p>Below is a step-by-step walkthrough to executing remote commands using Netmiko:</p><p>Until connecting to the device, the steps remain the same as defined in the previous section.</p><p><a>Execute Remote Commands</a></p><p>Now that you have an SSH connection to the network device, you can execute remote commands using the send_command method. For example, to retrieve the device&#39;s hostname, use:</p><p><br/></p><p>output = connection.send_command(&#39;show hostname&#39;)</p><p>print(output)</p><p>output = connection.send_command(&#39;show hostname&#39;)</p><p>print(output)</p><p/><p>output = connection.send_command(&#39;show hostname&#39;)</p><p>print(output)</p><p><br/></p><p>You can execute any command supported by the remote device using the send_command method. For example, to display the device&#39;s interface status, use:</p><p>output = connection.send_command(&#39;show interfaces status&#39;)</p><p>print(output)</p><p>output = connection.send_command(&#39;show interfaces status&#39;)</p><p>print(output)</p><p/><p>output = connection.send_command(&#39;show interfaces status&#39;)</p><p>print(output)</p><p><br/></p><p><a>Close the Connection</a></p><p>Finally, remember to close the SSH connection to the network device:</p><p><br/></p><p>connection.disconnect()                      </p><p>By using Netmiko, you can execute remote commands on network devices over an SSH connection, allowing you to manage devices remotely, automate tasks, and troubleshoot issues efficiently.</p><h2><a>Retrieving and Modifying Device Configuration</a></h2><p>Retrieving and modifying network device configurations is an essential task for network administrators. By automating these tasks, you can save time, minimize human error, and maintain consistency across your network infrastructure. In this demonstration, we&#39;ll continue using the Netmiko library to retrieve and modify configurations on a Cisco network device over an SSH connection.</p><p>Below is a step-by-step walkthrough to retrieving and modifying network device configurations using Netmiko:</p><p>Until connecting to the device, the steps remain the same as defined in the previous section.</p><p><a>Retrieve the Running Configuration</a></p><p>To retrieve the running configuration from the network device, use the send_command method with the &#39;show run&#39; command:</p><p><br/></p><p>running_config = connection.send_command(&#39;show run&#39;)</p><p>print(running_config)</p><p>running_config = connection.send_command(&#39;show run&#39;)</p><p>print(running_config)</p><p/><p>running_config = connection.send_command(&#39;show run&#39;)</p><p>print(running_config)</p><p><br/></p><p><a>Modify the Configuration</a></p><p>To modify the configuration, use the send_config_set method with a list of configuration commands. For example, to configure an interface with a description, IP address, and enable it, use the following code:</p><p><br/></p><p>config_commands = [</p><p>&#39;interface GigabitEthernet0/1&#39;, &#39;description Example Interface&#39;,</p><p>&#39;ip address 192.168.2.1 255.255.255.0&#39;,</p><p>&#39;no shutdown&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) print(output)</p><p>config_commands = [</p><p>&#39;interface GigabitEthernet0/1&#39;, &#39;description Example Interface&#39;,</p><p>&#39;ip address 192.168.2.1 255.255.255.0&#39;,</p><p>&#39;no shutdown&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) print(output)</p><p/><p>config_commands = [</p><p>&#39;interface GigabitEthernet0/1&#39;, &#39;description Example Interface&#39;,</p><p>&#39;ip address 192.168.2.1 255.255.255.0&#39;,</p><p>&#39;no shutdown&#39;,</p><p>]</p><p>output = connection.send_config_set(config_commands) print(output)</p><p><br/></p><p><a>Save the Configuration</a></p><p>To save the modified configuration to the startup configuration, so it persists across device</p><p>reboots, use the save_config method:</p><p><br/></p><p>output = connection.save_config()</p><p>print(output)</p><p>output = connection.save_config()</p><p>print(output)</p><p/><p>output = connection.save_config()</p><p>print(output)</p><p><br/></p><p><a>Close the Connection</a></p><p>Finally, remember to close the SSH connection to the network device:</p><p><br/></p><p>connection.disconnect()                      </p><p>By using Netmiko, you can efficiently retrieve and modify network device configurations over an SSH connection, streamlining network administration tasks and improving the overall management of your network infrastructure.</p><h2><a>Updating Device Firmware</a></h2><p>Updating device firmware is a critical task in maintaining the health and security of your network infrastructure. However, each vendor and even different models within the same vendor can have very different processes for updating firmware.</p><p>Let us take a look at a general process for updating firmware on a network device using Python and some helpful libraries such as paramiko for SSH connection and scp for secure file transfer.</p><p><a>Download the Firmware</a></p><p>The first step is to download the new firmware version from the vendor&#39;s official website. Make sure to download the correct firmware version for your specific device model.</p><p><a>Upload Firmware to the Device</a></p><p>Once you have the new firmware, you need to upload it to the network device. This is usually done via Secure Copy Protocol (SCP). You can use the scp Python library to automate this task.</p><p><a>Using SCP</a></p><p>The given below is an example of how to use scp in Python to upload a file:</p><p><br/></p><p>from paramiko import SSHClient from scp import SCPClient</p><p>ssh = SSHClient() ssh.load_system_host_keys()</p><p>ssh.connect(&#39;hostname&#39;, username=&#39;user&#39;, password=&#39;passwd&#39;) # SCPCLient takes a paramiko transport as an argument</p><p>with SCPClient(ssh.get_transport()) as scp:</p><p>scp.put(&#39;test.txt&#39;, &#39;test2.txt&#39;) # Copy test.txt to test2.txt</p><p>from paramiko import SSHClient from scp import SCPClient</p><p>ssh = SSHClient() ssh.load_system_host_keys()</p><p>ssh.connect(&#39;hostname&#39;, username=&#39;user&#39;, password=&#39;passwd&#39;) # SCPCLient takes a paramiko transport as an argument</p><p>with SCPClient(ssh.get_transport()) as scp:</p><p>scp.put(&#39;test.txt&#39;, &#39;test2.txt&#39;) # Copy test.txt to test2.txt</p><p/><p>from paramiko import SSHClient from scp import SCPClient</p><p>ssh = SSHClient() ssh.load_system_host_keys()</p><p>ssh.connect(&#39;hostname&#39;, username=&#39;user&#39;, password=&#39;passwd&#39;) # SCPCLient takes a paramiko transport as an argument</p><p>with SCPClient(ssh.get_transport()) as scp:</p><p>scp.put(&#39;test.txt&#39;, &#39;test2.txt&#39;) # Copy test.txt to test2.txt</p><p>In the above sample program, replace &#39;hostname&#39;, &#39;user&#39;, and &#39;passwd&#39; with your device&#39;s hostname (or IP address) and your SSH credentials. Also, replace &#39;test.txt&#39; with the path to the firmware file on your local system, and &#39;test2.txt&#39; with the desired location and filename on the remote system.</p><p><a>Install the Firmware</a></p><p>After the firmware file is uploaded to the device, you need to install it. This usually involves running specific commands on the device via SSH.</p><p>The given below is an example of how to use paramiko to execute commands on a remote device:</p><p><br/></p><p>from paramiko import SSHClient ssh = SSHClient() ssh.load_system_host_keys()</p><p>ssh.connect(&#39;hostname&#39;, username=&#39;user&#39;, password=&#39;passwd&#39;)</p><p>stdin, stdout, stderr = ssh.exec_command(&quot;command to install firmware&quot;)</p><p>from paramiko import SSHClient ssh = SSHClient() ssh.load_system_host_keys()</p><p>ssh.connect(&#39;hostname&#39;, username=&#39;user&#39;, password=&#39;passwd&#39;)</p><p>stdin, stdout, stderr = ssh.exec_command(&quot;command to install firmware&quot;)</p><p/><p>from paramiko import SSHClient ssh = SSHClient() ssh.load_system_host_keys()</p><p>ssh.connect(&#39;hostname&#39;, username=&#39;user&#39;, password=&#39;passwd&#39;)</p><p>stdin, stdout, stderr = ssh.exec_command(&quot;command to install firmware&quot;)</p><p>In the above snippet, replace &#39;hostname&#39;, &#39;user&#39;, and &#39;passwd&#39; with your device&#39;s hostname (or IP address) and your SSH credentials. Replace &quot;command to install firmware&quot; with the specific command(s) required to install the firmware on your device.</p><p><a>Reboot the Device</a></p><p>After the firmware is installed, you typically need to reboot the device for the changes to take effect. This can usually be done by executing a reboot command over SSH, similar to the firmware installation step above.</p><p><a>Verify the Update</a></p><p>Finally, once the device has rebooted, you should verify that the firmware update was successful. This can usually be done by logging into the device and checking the firmware version. This can also be automated using paramiko to run the appropriate command and retrieve the output.</p><p>Remember that updating firmware can cause the device to become unavailable for a period of time and may cause disruptions in your network. Always plan firmware updates carefully and consider updating in a maintenance window when the network usage is low.</p><h2><a>Summary</a></h2><p>In this chapter, we took a deep dive into the world of network automation, exploring how Python and its libraries such as Paramiko and Netmiko can be used to automate repetitive and complex tasks in network administration. We started with the basic concepts of network automation, including the reasons for its increasing importance in modern network management and its key advantages such as increased speed, efficiency, and accuracy.</p><p>We then moved on to a detailed discussion on managing network devices, services, and configurations. We demonstrated how Python libraries like Paramiko and Netmiko can be used to automate tasks such as managing VLANs, establishing SSH connections, and executing remote commands. We showed how to retrieve and modify network device configurations using Netmiko, which offers a simplified way of interacting with network devices over SSH. This not only enables rapid deployment and troubleshooting but also ensures consistency across the network infrastructure.</p><p>Lastly, we explored the process of updating network device firmware using Python. We emphasized the importance of careful planning and execution of firmware updates to minimize network disruption. The chapter concluded with examples of common socket errors that can occur during network automation tasks and strategies for handling these errors using Python.</p><p><br/></p><p></p><p></p><p><a href="part4.htm">&lt; Назад</a> | <a href="index.html">Содержимое</a> | <a href="part6.htm">Далее &gt;</a></p><p></p></body></html>
